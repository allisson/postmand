// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	postmand "github.com/crypitor/postmand"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// WebhookRepository is an autogenerated mock type for the WebhookRepository type
type WebhookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, webhook
func (_m *WebhookRepository) Create(ctx context.Context, webhook *postmand.Webhook) error {
	ret := _m.Called(ctx, webhook)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *postmand.Webhook) error); ok {
		r0 = rf(ctx, webhook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WebhookRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, getOptions
func (_m *WebhookRepository) Get(ctx context.Context, getOptions postmand.RepositoryGetOptions) (*postmand.Webhook, error) {
	ret := _m.Called(ctx, getOptions)

	var r0 *postmand.Webhook
	if rf, ok := ret.Get(0).(func(context.Context, postmand.RepositoryGetOptions) *postmand.Webhook); ok {
		r0 = rf(ctx, getOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postmand.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postmand.RepositoryGetOptions) error); ok {
		r1 = rf(ctx, getOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, listOptions
func (_m *WebhookRepository) List(ctx context.Context, listOptions postmand.RepositoryListOptions) ([]*postmand.Webhook, error) {
	ret := _m.Called(ctx, listOptions)

	var r0 []*postmand.Webhook
	if rf, ok := ret.Get(0).(func(context.Context, postmand.RepositoryListOptions) []*postmand.Webhook); ok {
		r0 = rf(ctx, listOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*postmand.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postmand.RepositoryListOptions) error); ok {
		r1 = rf(ctx, listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, webhook
func (_m *WebhookRepository) Update(ctx context.Context, webhook *postmand.Webhook) error {
	ret := _m.Called(ctx, webhook)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *postmand.Webhook) error); ok {
		r0 = rf(ctx, webhook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
